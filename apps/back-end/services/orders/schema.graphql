# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @key(fields: String!) on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

type Account {
  id: ID!
}

type Product {
  id: ID!
}

type ShippingRule {
  id: ID!
}

type ShippingAddress {
  id: ID!
}

type BillingAddress {
  id: ID!
}

type OrderItem {
  id: ID!
  qty: Int!
  product: Product
  paid: Float
  createdAt: String!
  updatedAt: String!
  paidAt: String
  refundable: Boolean!
  discount: Float
  discountAmount: Float
  cashback: Float
  affiliatorId: String
  orderId: String!
  status: OrderStatusEnum!
  rejectReason: String
  seller: Account!
  buyer: Account!
  order: Order!
  affiliator: Account!
}

enum OrderStatusEnum {
  pending
  paid
  rejectedBySeller
  rejectedByBuyer
  shipping
  compeleted
  canceled
}

type OrderStatus {
  of: OrderStatusEnum!
  rejectReason: String
}

type Order {
  id: ID!
  sellerId: ID!
  seller: Account
  buyerId: ID!
  buyer: Account
  createdAt: DateTime!
  updatedAt: DateTime!
  items: [OrderItem!]!
  status: OrderStatus!
  shippingAddressId: String!
  billingAddressId: String!
  shippingMethodId: String!
  paid: Float!
  trackingLink: String
  billing: BillingAddress!
  shipping: ShippingRule!
  shippingAddress: ShippingAddress!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GetSellerRecentOrdersResponse {
  data: [OrderItem!]!
  cursor: String
  nextCursor: String
  hasMore: Boolean!
  total: Int!
}

type Refund {
  id: ID!
  requestedById: ID!
  orderItemId: ID!
  sellerId: ID!
  reason: String!
  type: RefundType!
  amount: Float!
  fullAmount: Boolean!
  qty: Int!
  status: RefundStatusType!
  adminStatus: RefundStatusType!
  rejectReason: String
  opened: Boolean!
  createdAt: String!
  updatedAt: String!
  product: Product!
  orderItem: OrderItem
}

enum RefundType {
  money
  credit
}

enum RefundStatusType {
  pending
  accepted
  rejected
  refunded
  closed
}

type ReturnedOrder {
  id: ID!
  orderItemId: ID!
  reason: String!
  type: RefundType!
  amount: Float!
  fullAmount: Float!
  status: RefundStatusType!
  rejectReason: String
  createdAt: String!
  orderItem: OrderItem!
}

type SellerSalesStat {
  id: ID!
  sellerId: ID!
  sales: Int!
  salesAmount: Float!
  purchases: Int!
  purchasesAmount: Float!
  returns: Int!
  returnsAmount: Float!
  affiliations: Int!
  affiliationsAmount: Float!
  salesCategories: [SalesCategory!]!
}

type SalesCategory {
  categoryId: ID!
  sales: Int!
}

type Query {
  adminGetAccountOrderById(id: String!): Order!
  getRefundableOrders(args: GetRefundableOrdersInput!): [Order!]!
  getMyOrders(getMyOrdersArgs: GetMyOrdersInput!): [Order!]!
  getOrder(id: String!): Order!
  getUserOrders(args: GetUserOrders!): [Order!]!
  getFilteredOrders(args: GetFilteredOrdersInput!): [Order!]!
  getLatestOrders(take: Int = 10): [Order!]!
  adminGetSellerSales(args: AdminGetSellerSalesInput!): [OrderItem!]!
  getSalesDurningPeriod(args: GetSalesDurningPeriodInput!): [OrderItem!]!
  getSellerRecentOrders(args: GetSellerRecentOrdersInput!): GetSellerRecentOrdersResponse!
  getRecentSales(count: Int = 10): [OrderItem!]!
  getMyReturnedOrders(args: GetMyReturnedOrdersInput!): [Refund!]!
  adminGetRefundRequest(id: String!): Refund!
  getRefundRequests(args: GetFilteredRefundsInput!): [Refund!]!
  adminGetUserReturnedOrders(args: AdminGetUserReturnedOrdersInput!): [ReturnedOrder!]!
  adminGetReturnedOrders(args: AdminGetReturnedOrdersInput!): [ReturnedOrder!]!
  getSellerStats(sellerId: String!, period: StatsRetrivePeriod!, type: SellerSalesType!): [SellerSalesStat!]!
  getSellerDailySalesStats(sellerId: String!, period: String!): [SellerSalesStat!]!
}

input GetRefundableOrdersInput {
  pagination: GqlPaginationInput!
}

input GqlPaginationInput {
  page: Int!
  take: Int!
}

input GetMyOrdersInput {
  status: OrderStatusEnum
  pagination: GqlPaginationInput!
}

input GetUserOrders {
  q: String!
  status: OrderStatusEnum
  userId: String!
  accountType: String!
  pagination: GqlPaginationInput!
}

input GetFilteredOrdersInput {
  date_from: String
  date_to: String
  qty: Int
  price: Float
  buyer: String
  seller: String
  payment_method: String
  id: String
  status: OrderStatusEnum
  total: Float
  pagination: GqlPaginationInput!
}

input AdminGetSellerSalesInput {
  accountId: String!
  pagination: GqlPaginationInput!
}

input GetSalesDurningPeriodInput {
  productName: String
  seller: String
  buyer: String
  qty: Int
  address: String
  status: OrderStatusEnum
  searchPeriod: OrderSearchPeriod
  pagination: GqlPaginationInput!
}

enum OrderSearchPeriod {
  day
  month
  week
}

input GetSellerRecentOrdersInput {
  pagination: GqlPaginationInput!
  sellerId: String!
}

input GetMyReturnedOrdersInput {
  pagination: GqlPaginationInput!
}

input GetFilteredRefundsInput {
  refundId: String
  orderId: String
  comment: String
  product: String
  status: RefundStatusType
  addedDate: String
  dateModified: String
  seller: String
  buyer: String
  pagination: GqlPaginationInput!
}

input AdminGetUserReturnedOrdersInput {
  pagination: GqlPaginationInput!
  accountId: ID!
}

input AdminGetReturnedOrdersInput {
  productName: String
  sellerName: String
  buyerName: String
  qty: Int
  price: Float
  shippingAmount: Float
  reason: String
  pagination: GqlPaginationInput!
}

enum StatsRetrivePeriod {
  day
  week
  month
  year
}

enum SellerSalesType {
  product
  service
}

type Mutation {
  adminCancelOrder(id: String!): Boolean!
  rejectReceivedOrder(args: RejectReceivedOrderInput!): Boolean!
  rejectRequestedOrder(args: RejectRequestedOrderInput!): Boolean!
  acceptRequestedOrder(args: AcceptRequestedOrderInput!): Boolean!
  acceptReceivedOrder(args: AcceptReceivedOrderInput!): Boolean!
  askForRefund(askForRefundArgs: AskForRefundInput!): Boolean!
  acceptRefundRequest(id: ID!): Boolean!
  rejectRefundRequest(args: RejectRefundRequestInput!): Boolean!
  adminConfirmRefund(id: String!): Boolean!
  adminCloseRefund(id: String!): Boolean!
}

input RejectReceivedOrderInput {
  id: ID!
  rejectReason: String!
}

input RejectRequestedOrderInput {
  id: ID!
  rejectReason: String!
}

input AcceptRequestedOrderInput {
  id: ID!
}

input AcceptReceivedOrderInput {
  id: ID!
}

input AskForRefundInput {
  type: RefundType!
  orderItemId: ID!
  fullAmount: Boolean
  amount: Float
  reason: String = ""
  qty: Int!
  opened: Boolean!
}

input RejectRefundRequestInput {
  id: ID!
  reason: String = ""
}
