# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @key(fields: String!) on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

type Category {
  id: ID!
  name: String!
  parantId: ID!
}

type ShippingDetails {
  country: String!
  shippingRulesIds: [String!]!
}

type ProductPresentation {
  type: PresentationType!
  src: String!
}

enum PresentationType {
  video
  image
}

type CashBack {
  units: Int!
  amount: Int!
  type: CashbackType!
}

enum CashbackType {
  percent
  cash
}

type Discount {
  units: Int!
  amount: Int!
}

type ProductAttribute {
  name: String!
  values: [String!]!
}

type Product {
  id: ID!
  sellerId: ID!
  vendor_external_link: String!
  title: String!
  description: String!
  shopId: ID!
  categoryId: ID!
  category: Category
  attributes: [ProductAttribute!]!
  stock: Int!
  discount: Discount!
  cashback: CashBack!
  presentations: [ProductPresentation!]!
  rate: Int!
  brand: String!
  price: Float!
  visibility: VisibilityEnum!
  shippingRulesIds: [ID!]!
  shippingDetails: ShippingDetails
  reviews: Int!
  sales: Int!
  vat: Float!
}

enum VisibilityEnum {
  hidden
  public
}

type MyProduct {
  id: ID!
  sellerId: ID!
  vendor_external_link: String!
  title: String!
  description: String!
  shopId: ID!
  categoryId: ID!
  category: Category
  attributes: [ProductAttribute!]!
  stock: Int!
  discount: Discount!
  cashback: CashBack!
  presentations: [ProductPresentation!]!
  rate: Int!
  brand: String!
  price: Float!
  visibility: VisibilityEnum!
  shippingRulesIds: [ID!]!
  shippingDetails: ShippingDetails
  reviews: Int!
  sales: Int!
  vat: Float!
  earnings: Float!
}

type ProductFilterGroupValue {
  name: String!
  sortOrder: Int!
}

type Filter {
  id: ID!
  name: String!
  values: [ProductFilterGroupValue!]!
  sortOrder: Int!
}

type Location {
  lat: Float!
  long: Float!
  address: String!
  country: String!
  city: String!
  state: String!
}

type Shop {
  id: ID!
  name: String!
  ownerId: String!
  location: Location!
  description: String!
  banner: String!
  verified: Boolean!
  storeType: [StoreType!]!
  vendorType: [VendorType!]!
  targetGenders: [TargetGenders!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum StoreType {
  product
  service
}

enum VendorType {
  profissional
  individual
}

enum TargetGenders {
  male
  female
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ShippingCountry {
  name: String!
  code: String!
}

type ShippingDeliveryTimeRange {
  from: Int!
  to: Int!
}

type ShippingRule {
  id: ID!
  sellerId: ID!
  name: String!
  countries: [ShippingCountry!]!
  cost: Float!
  shippingTypes: [ShippingType!]!
  deliveryTimeRange: ShippingDeliveryTimeRange!
}

enum ShippingType {
  paid
  click_and_collect
}

type ShippingRuleGeoZone {
  id: ID!
  country: String!
  shippingTypeRuleId: ID!
}

type ShippingTypeRule {
  id: ID!
  type: ShippingType!
  zones: [ShippingRuleGeoZone!]!
}

type Query {
  getNearShops(GetNearShopsInput: GetNearShopsInput!): [Shop!]!
  getAllShops: [Shop!]!
  getShopById(id: String!): Shop!
  getFilteredShops(filteredShopsArgs: FilteredShopsInput!): [Shop!]!
  getProductById(id: String!): Product!
  getProducts: [Product!]!
  getProduct(id: ID!): Product!
  getMyProducts(args: GqlPaginationInput!): [MyProduct!]!
  getCategories: [Category!]!
  getFilteredCategory(args: GetFilteredCategory): [Category!]!
  getProductsFilters(getFiltersArgs: GetFiltersInput!): [Filter!]!
  getAllProducts(args: GetFilteredProductsAdminInput!): [Product!]!
  getShippingGeoZoneRules: [ShippingTypeRule!]!
  getShippingRuleGeoZones(id: String!): [ShippingRuleGeoZone!]!
}

input GetNearShopsInput {
  lat: Float!
  lon: Float!
  distance: Float!
}

input FilteredShopsInput {
  storeType: StoreType
  vendorType: VendorType
  targetGender: TargetGenders
  country: String
  city: String
  pagination: GqlPaginationInput!
}

input GqlPaginationInput {
  page: Int!
  take: Int!
}

input GetFilteredCategory {
  name: String
  sortOrder: Int
}

input GetFiltersInput {
  name: String
  sortOrder: Int
}

input GetFilteredProductsAdminInput {
  title: String
  seller: String
  productId: ID
  price: Float
  qty: Int
  status: ProductStatus
  updatedAt: String
  type: ProductType
  pagination: GqlPaginationInput!
}

enum ProductStatus {
  suspended
  active
  pasued
  pending
}

enum ProductType {
  goods
  digital
}

type Mutation {
  createShop(createShopInput: CreateShopInput!): Shop!
  removeAllShops: Boolean!
  updateMyShop(updateMyShopInput: UpdateShopInput!): Shop!
  getProductVendorLink(productId: String!): String!
  createNewProduct(createNewProductInput: CreateProductInput!): Product!
  updateProduct(updateProductArgs: UpdateProductInput!): Product!
  deleteAllProducts: Boolean!
  createProductsPh: Boolean!
  uploadProductPresentations(files: [Upload!]!): Boolean!
  deleteProduct(productId: ID!): Product!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  deleteCategory(deleteCategoryId: String!): Category!
  updateCategory(updateCategoryArgs: UpdateCategoryInput!): Category!
  createFilter(createFilterGroupArgs: CreateFilterInput): Filter!
  updateFilter(updateFilterArgs: UpdateFilterInput!): Filter!
  deleteFilter(deleteFilterId: String!): Filter!
  updateProductAdmin(args: UpdateProductInput!): Boolean!
  createShippingTypeRuleGeoZone(args: CreateShippingGeoZone!): Boolean!
  createShippingTypeRule(args: CreateShippingTypeRuleInput!): Boolean!
  createShippingRule(createShippingRuleArgs: CreateShippingRuleInput!): ShippingRule!
  updateShippingRule(updateShippingRuleArgs: UpdateShippingRuleInput!): ShippingRule!
  deleteShippingRule(id: ID!): ShippingRule!
}

input CreateShopInput {
  name: String!
  banner: String!
  description: String!
  location: LocationInput!
  storeType: [StoreType!]!
  vendorType: [VendorType!]!
  targetGenders: [TargetGenders!]!
}

input LocationInput {
  lat: Float!
  long: Float!
  address: String!
  country: String!
  city: String!
  state: String!
}

input UpdateShopInput {
  name: String
  banner: String
  description: String
  location: LocationInput
  storeType: [StoreType!]
  vendorType: [VendorType!]
  targetGenders: [TargetGenders!]
}

input CreateProductInput {
  type: ProductType!
  title: String!
  description: String!
  categoryId: ID!
  attributes: [ProductAttributeInput!]!
  stock: Int!
  discount: DiscountInput!
  cashback: CashBackInput!
  presentations: [ProductPresentationInput!]!
  price: Float!
  brand: String!
  visibility: VisibilityEnum!
  status: ProductStatus
  vat: Float!
}

input ProductAttributeInput {
  name: String!
  values: [String!]!
}

input DiscountInput {
  units: Int!
  amount: Int!
}

input CashBackInput {
  units: Int!
  amount: Int!
  type: CashbackType!
}

input ProductPresentationInput {
  type: PresentationType!
  src: String!
}

input UpdateProductInput {
  type: ProductType
  title: String
  description: String
  categoryId: ID
  attributes: [ProductAttributeInput!]
  stock: Int
  discount: DiscountInput
  cashback: CashBackInput
  presentations: [ProductPresentationInput!]
  price: Float
  brand: String
  visibility: VisibilityEnum
  status: ProductStatus
  vat: Float
  id: ID!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateCategoryInput {
  parantId: ID
  name: String!
  sortOrder: Int!
}

input UpdateCategoryInput {
  parantId: ID
  name: String
  sortOrder: Int
  id: ID!
}

input CreateFilterInput {
  name: String!
  sortOrder: Int!
  values: [ProductFilterGroupValueInput!]!
}

input ProductFilterGroupValueInput {
  name: String!
  sortOrder: Int!
}

input UpdateFilterInput {
  name: String
  sortOrder: Int
  values: [ProductFilterGroupValueInput!]
  id: ID!
}

input CreateShippingGeoZone {
  country: String!
  zone: String!
  shippingTypeRuleId: ID!
}

input CreateShippingTypeRuleInput {
  name: String!
  description: String!
  type: ShippingType!
}

input CreateShippingRuleInput {
  countries: [ShippingCountryInput!]!
  name: String!
  cost: Float!
  shippingTypes: [ShippingType!]!
  deliveryTimeRange: ShippingDeliveryTimeRangeInput!
}

input ShippingCountryInput {
  name: String!
  code: String!
}

input ShippingDeliveryTimeRangeInput {
  from: Int!
  to: Int!
}

input UpdateShippingRuleInput {
  countries: [ShippingCountryInput!]
  name: String
  cost: Float
  shippingTypes: [ShippingType!]
  deliveryTimeRange: ShippingDeliveryTimeRangeInput
  id: ID!
}
