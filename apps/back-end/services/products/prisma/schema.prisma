// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model ProductCategory {
  id                 String                @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  sortOrder          Int
  status             ProductCategoryStatus
  thumbnail          String?
  metaTagTitle       TranslationText[]
  metaTagDescription TranslationText[]
  parantId           String?
}

enum ProductCategoryStatus {
  active
  inActive
}

type ProductFilterGroupValue {
  name      TranslationText[]
  sortOrder Int
}

model ProductFilterGroup {
  id        String                    @id @default(auto()) @map("_id") @db.ObjectId
  name      TranslationText[]
  values    ProductFilterGroupValue[]
  sortOrder Int
}

enum ProdcutType {
  goods
  digital
}

type ProductAttribute {
  name   String
  values String[]
}

enum ProductUsageStatus {
  used
  new
}

model Product {
  id                    String                @id() @default(auto()) @map("_id") @db.ObjectId()
  sellerId              String
  vendor_external_link  String?
  todayProductClickId   String?
  type                  ProdcutType
  hashtags              String[]
  title                 TranslationText[]
  description           TranslationText[]
  price                 Int
  status                ProductStatus         @default(active)
  suspensionReason      String?
  usageStatus           ProductUsageStatus    @default(new)
  vat                   Int
  categoryId            String
  attributes            ProductAttribute[]
  stock                 Int
  rate                  Float                 @default(0)
  reviews               Int                   @default(0)
  rateStarCount         Int                   @default(0)
  brand                 String
  discountId            String?               @db.ObjectId
  cashbackId            String?
  shippingRulesIds      String[]              @db.ObjectId
  presentations         ProductPresentation[]
  thumbnail             String
  visibility            VisibilityEnum        @default(hidden)
  sales                 Int                   @default(0)
  earnings              Float                 @default(0)
  totalOrdered          Int                   @default(0)
  totalDiscounted       Int                   @default(0)
  totalDiscountedAmount Int                   @default(0)
  unitsRefunded         Int                   @default(0)
  positiveFeedback      Int                   @default(0)
  negitiveFeedback      Int                   @default(0)
  views                 Int                   @default(0)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  discount              Discount?             @relation(fields: [discountId], references: [id])
  condition             ProductCondition
  sizes                 ProductSize[]
  colors                String[]
}

enum ProductSize {
  s
  m
  l
  xl
  xxl
  xxxl
  xxxxl
}

model ProductDayExternalClicks {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  createdAt DateTime @default(now())
  clicks    Int      @default(0)
}

enum ProductCondition {
  new
  used
  recondition
}

model Shop {
  id              String               @id @default(auto()) @map("_id") @db.ObjectId
  ownerId         String               @unique
  name            TranslationText[]
  description     TranslationText[]
  banner          String
  verified        Boolean
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt()
  phone           String
  email           String
  thumbnail       String
  location        Location
  storeType       StoreType
  businessType    BusinessType
  storeFor        StoreFor[]
  targetGenders   TargetGenders[]
  vat             VatSettings?
  status          ShopStatus           @default(inActive)
  payment_methods ShopPaymentMethods[]
  type            ServiceType?
  videos          String[]
  images          String[]
  reviews         Int                  @default(0)
  rating          Float                @default(0)
  hashtags        String[]
}

model ServiceWorkingSchedule {
  id          String                          @id @map("_id") @db.ObjectId
  sellerId    String                          @unique @db.ObjectId
  weekdays    ServiceWeekDaysWorkingHours
  specialDays ServiceSpecialWorkingHoursDay[]
}

type ServiceWeekDaysWorkingHours {
  mo ServiceDayWorkingHours?
  tu ServiceDayWorkingHours?
  we ServiceDayWorkingHours?
  th ServiceDayWorkingHours?
  fr ServiceDayWorkingHours?
  sa ServiceDayWorkingHours?
  su ServiceDayWorkingHours?
}

type ServiceDayWorkingHours {
  periods DateTime[]
}

type ServiceSpecialWorkingHoursDay {
  date         DateTime
  workingHours ServiceDayWorkingHours
}

enum ServiceType {
  hotel
  holiday_rentals
  restaurant
  health_center
  beauty_center
  vehicle
}

enum ShopPaymentMethods {
  credit_card
  visa
  mastercard
  check
  cash
}

enum ShopStatus {
  inActive
  active
  suspended
}

enum TypeOfSeller {
  individual
  professional
}

type VatSettings {
  VatID    String?
  location Location?
}

model ShippingAddress {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerId      String   @db.ObjectId
  instractions String?
  phone        String?
  zipCode      String?
  firstname    String
  lastname     String
  location     Location
}

model Discount {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  units   Int
  amount  Float
  Product Product[]
}

model CashBack {
  id     String       @id @default(auto()) @map("_id") @db.ObjectId
  units  Int
  amount Float
  type   CashbackType
}

enum CashbackType {
  percent
  cash
}

enum VisibilityEnum {
  hidden
  public
}

type ProductPresentation {
  type PresentationType
  src  String
}

enum PresentationType {
  video
  image
}

type Location {
  lat        Float?
  long       Float?
  country    String
  city       String
  state      String
  address    String
  address2   String?
  postalCode String
}

enum StoreType {
  product
  service
}

enum BusinessType {
  company
  individual
}

enum TargetGenders {
  male
  female
}

model ShippingSettings {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  shopId    String   @unique @db.ObjectId
  ownerId   String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model ShippingRule {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  sellerId          String
  name              String
  countries         ShippingCountry[]
  cost              Float
  deliveryTimeRange DeliveryTimeRange
  shippingType      ShippingType
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt()
}

model ShippingTypeRule {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  type        ShippingType
  geoZones    GeoZone[]
}

model GeoZone {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  country            String
  zone               String
  shippingTypeRuleId String           @db.ObjectId
  shippingTypeRule   ShippingTypeRule @relation(fields: [shippingTypeRuleId], references: [id])
}

type DeliveryTimeRange {
  from Int
  to   Int
}

type ShippingCountry {
  code String
}

enum ShippingType {
  paid
  click_and_collect
}

enum ProductStatus {
  suspended
  active
  pasued
  pending
  deleted
}

type TranslationText {
  langId String
  value  String
}

enum StoreFor {
  men
  women
  children
  babies
}
