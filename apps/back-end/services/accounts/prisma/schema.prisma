// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                         String                   @id @default(auto()) @map("_id") @db.ObjectId
  stripeId                   String?                  @unique
  membershipId               String?                  @db.ObjectId
  profession                 String?
  firstName                  String
  lastName                   String
  email                      String                   @unique
  emailVerified              Boolean                  @default(false)
  photo                      String?
  phone                      String?
  password                   String
  products                   Int?                     @default(0)
  sales                      Int?                     @default(0)
  online                     Boolean                  @default(false)
  lastActiveAt               DateTime                 @default(now())
  type                       AccountType
  companyRegisterationNumber String?
  gender                     AccountGenderEnum
  verified                   Boolean                  @default(false)
  status                     AccountStatus            @default(pending)
  rejectReason               String?
  idVerified                 Boolean                  @default(false)
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt()
  lang                       String                   @default("en")
  phoneVerified              Boolean                  @default(false)
  ips                        String[]
  birthDate                  String
  AccountDeletionRequest     AccountDeletionRequest[]
  contacts                   UserContact?
  requiredActions            RequiredAction[]
}

type RequiredAction {
  code     String
  priority Int
}

enum AccountGenderEnum {
  male
  female
}

model UserContact {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  gmail     String?
  yahoo     String?
  whatsapp  String?
  outlook   String?
  accountId String  @unique @db.ObjectId
  account   Account @relation(fields: [accountId], references: [id])
}

enum AccountStatus {
  active
  pending
  inActive
  suspended
  refused
}

model UserIdenityVerificationRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique @db.ObjectId

  compeleted   Boolean @default(false)
  accepted     Boolean @default(false)
  acceptedById String? @db.ObjectId

  firstName        String
  lastName         String
  fullAddress      String
  addressProofBill String
  dateOfBirth      DateTime
  id_front         String
  id_back          String
  VVCPicture       String?
  VVC              String
}

model UserAccountVerificationRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique @db.ObjectId

  status       AccountVerificationStatus @default(pending)
  refuseReason String?
  username     String
  fullName     String
  knownAs      String
  categoryId   String
  idPhoto      String
}

enum AccountVerificationStatus {
  pending
  rejected
  accepted
}

model Cookies {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  required    Boolean
  benefits    String[]
  cons        String[]
}

model UserCookiesSettings {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @unique @db.ObjectId
  acceptedCookiesIds String[] @db.ObjectId
  acceptedRequired   Boolean  @default(false)
}

enum AccountType {
  admin
  mod
  seller
  buyer
}

model AccountDeletionRequest {
  id           String                       @id @default(auto()) @map("_id") @db.ObjectId
  account      Account                      @relation(fields: [accountId], references: [id])
  accountId    String                       @unique @db.ObjectId
  createdAt    DateTime                     @default(now())
  updatedAt    DateTime                     @updatedAt
  status       AccountDeletionRequestStatus
  resolvedById String?
}

enum AccountDeletionRequestStatus {
  approved
  pending
  rejected
}
