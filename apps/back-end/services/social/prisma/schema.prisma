// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id             String            @id() @default(auto()) @map("_id") @db.ObjectId()
  ownerId        String            @unique() @db.ObjectId()
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt()
  username       String
  lastActive     DateTime
  activeStatus   ActiveStatus      @default(inActive)
  bio            String
  photo          String
  followers      Int               @default(0)
  following      Int               @default(0)
  followingData  Follow[]          @relation(name: "followingProfile")
  followersData  Follow[]
  publications   Int               @default(0)
  profession     String
  visibility     ProfileVisibility
  Posts          NewsfeedPost[]
  Comment        Comment[]
  blockedUsers   BlockedUser[]
  myShares       ContentShare[]
  reactedContent ContentReaction[]
}

model BlockedUser {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  blockerProfile   Profile  @relation(fields: [blockerProfileId], references: [id])
  blockerProfileId String   @db.ObjectId
  blockedProfileId String   @db.ObjectId
  blockedAt        DateTime @default(now())
}

model Follow {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  followerProfile   Profile @relation(fields: [followerProfileId], references: [id])
  followerProfileId String  @db.ObjectId

  followingProfile   Profile  @relation(name: "followingProfile", fields: [followingProfileId], references: [id])
  followingProfileId String   @db.ObjectId
  followedAt         DateTime @default(now())
}

enum ActiveStatus {
  idle
  active
  inActive
  doNotDisturb
}

enum ProfileVisibility {
  public
  followers
  private
}

type Hashtag {
  tag String
}

enum AttachmentType {
  img
  vid
  text
}

type Attachment {
  type AttachmentType
  src  String
}

enum PostVisibility {
  hidden
  public
  followers
  following
}

enum CommentsVisibility {
  hidden
  public
  followers
  following
}

model NewsfeedPost {
  id                 String             @id() @default(auto()) @map("_id") @db.ObjectId()
  userId             String             @db.ObjectId
  publisher          Profile            @relation(fields: [authorProfileId], references: [id])
  authorProfileId    String             @db.ObjectId
  title              String
  content            String
  attachments        Attachment[]
  tags               Hashtag[]
  reactionNum        Int                @default(0)
  comments           Int                @default(0)
  shares             Int                @default(0)
  visibility         PostVisibility     @default(hidden)
  commentsVisibility CommentsVisibility @default(public)

}

model ContentReaction {
  id                 String              @id() @default(auto()) @map("_id") @db.ObjectId()
  userId             String              @db.ObjectId
  hostId             String              @db.ObjectId
  hostType           ContentHostType
  reactionType       ContentReactionType @default(like)
  reactedBy          Profile             @relation(fields: [reactedByProfileId], references: [id])
  reactedByProfileId String              @db.ObjectId
  reactedAt          DateTime            @default(now())
}

model ContentShare {
  id       String          @id @default(auto()) @map("_id") @db.ObjectId
  hostId   String          @db.ObjectId
  hostType ContentHostType

  sharedBy          Profile  @relation(fields: [sharedByProfileId], references: [id])
  sharedByProfileId String   @db.ObjectId
  sharedByUserId    String   @db.ObjectId
  sharedAt          DateTime @default(now())
}

enum ContentHostType {
  post_newsfeed
  post_service
  post_shop
  comment
  action
  story
}

enum ContentReactionType {
  like
  love
  funny
  sad
  angry
}

model Comment {
  id              String          @id() @default(auto()) @map("_id") @db.ObjectId()
  hostType        ContentHostType
  hostId          String          @db.ObjectId
  author          Profile         @relation(fields: [authorProfileId], references: [id])
  authorProfileId String          @db.ObjectId
  userId          String          @db.ObjectId
  attachments     Attachment[]
  content         String
  commentedAt     DateTime        @default(now())
  mentions        String[]
  likes           Int             @default(0)
  replies         Int             @default(0)
}
