// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id             String            @id() @default(auto()) @map("_id") @db.ObjectId()
  ownerId        String            @unique() @db.ObjectId()
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt()
  username       String
  lastActive     DateTime
  activeStatus   ActiveStatus      @default(inActive)
  bio            String            @default("Hi, im a new Wiaah user")
  photo          String
  coverPhoto     String?
  status         ProfileStatus     @default(active)
  followers      Int               @default(0)
  following      Int               @default(0)
  followingData  Follow[]          @relation(name: "followingProfile")
  followersData  Follow[]
  publications   Int               @default(0)
  profession     String
  verified       Boolean           @default(false)
  hashtags       String[]
  visits         Int               @default(0)
  visibility     ProfileVisibility @default(public)
  Posts          NewsfeedPost[]
  comments       Comment[]
  blockedUsers   BlockedUser[]     @relation(name: "blockerProfile")
  myShares       ContentShare[]
  reactedContent ContentReaction[]
  Story          Story[]
  StoryView      StoryView[]
  BlockedUser    BlockedUser[]
}

model FollowRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerId   String   @db.ObjectId
  profileId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlockedUser {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  blockerProfile Profile  @relation(fields: [blockerUserId], references: [ownerId], name: "blockerProfile")
  blockedProfile Profile  @relation(fields: [blockedUserId], references: [ownerId])
  blockerUserId  String   @db.ObjectId
  blockedUserId  String   @db.ObjectId
  blockedAt      DateTime @default(now())

  @@unique([blockedUserId, blockerUserId], name: "blockedProfileRel")
}

model Follow {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  followerProfile         Profile  @relation(fields: [followerProfileId], references: [id])
  followerUserId          String   @db.ObjectId
  followerProfileId       String   @db.ObjectId
  followerLastStorySeenAt DateTime @default(now())

  followingLastStoryPostedAt DateTime @default(now())
  followingProfile           Profile  @relation(name: "followingProfile", fields: [followingProfileId], references: [id])
  followingUserId            String   @db.ObjectId
  followingProfileId         String   @db.ObjectId

  followedAt DateTime @default(now())

  @@unique([followerUserId, followingUserId], name: "followRelation")
}

model NewsfeedPost {
  id                 String             @id() @default(auto()) @map("_id") @db.ObjectId()
  userId             String             @db.ObjectId
  publisher          Profile            @relation(fields: [authorProfileId], references: [id])
  authorProfileId    String             @db.ObjectId
  title              String
  content            String
  attachments        Attachment[]
  hashtags           Hashtag[]
  reactionNum        Int                @default(0)
  comments           Int                @default(0)
  shares             Int                @default(0)
  views              Int                @default(0)
  visibility         PostVisibility     @default(hidden)
  location           PostLocation?
  commentsVisibility CommentsVisibility @default(public)
  mentions           PostMention[]
  tags               PostTag[]
  status             PostStatus         @default(active)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

type MarketingTag {
  id   String
  type MarketingTagType
  x    Float
  y    Float
}

enum MarketingTagType {
  product
  service
}

model ProductPost {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  productId          String             @db.ObjectId
  userId             String             @db.ObjectId
  reactionNum        Int                @default(0)
  comments           Int                @default(0)
  shares             Int                @default(0)
  views              Int                @default(0)
  hashtags           String[]
  visibility         PostVisibility     @default(hidden)
  location           PostLocation?
  commentsVisibility CommentsVisibility @default(public)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model ServicePost {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  serviceId          String             @db.ObjectId
  userId             String             @db.ObjectId
  reactionNum        Int                @default(0)
  comments           Int                @default(0)
  shares             Int                @default(0)
  views              Int                @default(0)
  hashtags           String[]
  visibility         PostVisibility     @default(hidden)
  location           PostLocation?
  commentsVisibility CommentsVisibility @default(public)
  serviceType        TypeOfService
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

enum TypeOfService {
  hotelRoom
  holidayRental
  restaurantMenu
  healthCenterTreatment
  beautyCenterTreatment
  vehicle
}

model AffiliationPost {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  affiliationId      String             @db.ObjectId
  userId             String             @db.ObjectId
  reactionNum        Int                @default(0)
  comments           Int                @default(0)
  shares             Int                @default(0)
  views              Int                @default(0)
  hashtags           String[]
  visibility         PostVisibility     @default(hidden)
  location           PostLocation?
  commentsVisibility CommentsVisibility @default(public)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model Action {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  src                String
  cover              String
  userId             String             @db.ObjectId
  reactionNum        Int                @default(0)
  comments           Int                @default(0)
  shares             Int                @default(0)
  views              Int                @default(0)
  link               String?
  allowedActions     ActionType[]
  visibility         PostVisibility     @default(hidden)
  location           PostLocation?
  commentsVisibility CommentsVisibility @default(public)
  mentions           PostMention[]
  tags               PostTag[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

enum ActionType {
  duet
  stitch
  comment
}

model ContentReaction {
  id                 String              @id() @default(auto()) @map("_id") @db.ObjectId()
  userId             String              @db.ObjectId
  hostId             String              @db.ObjectId
  hostType           ContentHostType
  reactionType       ContentReactionType @default(like)
  reactedBy          Profile             @relation(fields: [reactedByProfileId], references: [id])
  reactedByProfileId String              @db.ObjectId
  reactedAt          DateTime            @default(now())

  @@unique([hostId, hostType, reactedByProfileId])
}

model ContentShare {
  id       String          @id @default(auto()) @map("_id") @db.ObjectId
  hostId   String          @db.ObjectId
  hostType ContentHostType

  sharedBy          Profile  @relation(fields: [sharedByProfileId], references: [id])
  sharedByProfileId String   @db.ObjectId
  sharedByUserId    String   @db.ObjectId
  sharedAt          DateTime @default(now())
}

model UserSavedPostsGroup {
  id     String          @id @default(auto()) @map("_id") @db.ObjectId
  userId String          @unique @db.ObjectId
  posts  UserSavedPost[]
}

model Comment {
  id              String           @id() @default(auto()) @map("_id") @db.ObjectId()
  hostType        ContentHostType
  hostId          String           @db.ObjectId
  author          Profile          @relation(fields: [authorProfileId], references: [id])
  authorProfileId String           @db.ObjectId
  userId          String           @db.ObjectId
  attachment      Attachment
  content         String
  commentedAt     DateTime         @default(now())
  mentions        CommentMention[]
  likes           Int              @default(0)
  replies         Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Story {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  publisherId  String        @db.ObjectId
  publisher    Profile       @relation(fields: [profileId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  type         StoryType     @default(base)
  referenceId  String?       @db.ObjectId
  content      String?
  reactionsNum Int           @default(0)
  attachment   Attachment?
  viewsCount   Int           @default(0)
  archived     Boolean       @default(false)
  views        StoryView[]
  likes        StoryLike[]
  mentions     PostMention[]
  profileId    String        @db.ObjectId()
}

enum StoryType {
  base
  text
  image
  video
  affiliation
  product
  post
  service
}

model StoryView {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  viewerId  String   @db.ObjectId
  storyId   String   @db.ObjectId
  createdAt DateTime @default(now())
  story     Story    @relation(fields: [storyId], references: [id])
  viewer    Profile  @relation(fields: [viewerId], references: [id])

  @@unique([viewerId, storyId], name: "storyViewIds")
}

model StoryLike {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  storyId String @db.ObjectId
  story   Story  @relation(fields: [storyId], references: [id])

  @@unique([userId, storyId], name: "storyLikeIds")
}

model PrivacySettings {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  userId          String  @unique @db.ObjectId
  privateAccount  Boolean @default(false)
  hideLikesNum    Boolean @default(false)
  hideCommentsNum Boolean @default(false)
  hideViewsNum    Boolean @default(false)
}

model HiddenContent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  contentId String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([contentId, userId])
}

type Hashtag {
  tag String
}

type CommentMention {
  userId String
}

type CommentTag {
  userId String
}

type Attachment {
  type          AttachmentType
  src           String
  marketingTags MarketingTag[]
}

type PostMention {
  userId String
}

type PostTag {
  userId String
}

type PostLocation {
  city    String
  country String
  address String?
  state   String?
}

type UserSavedPost {
  postId   String
  postType PostType
}

enum PostType {
  newsfeed_post
  shop_post
  service_post
  affiliation_post
}

enum ContentHostType {
  post_newsfeed
  post_service
  post_shop
  comment
  action
  story
}

enum ContentReactionType {
  like
  love
  funny
  sad
  angry
}

enum PostVisibility {
  hidden
  public
  followers
  following
}

enum CommentsVisibility {
  hidden
  public
}

enum ActiveStatus {
  idle
  active
  inActive
  doNotDisturb
}

enum ProfileVisibility {
  public
  followers
  private
}

enum AttachmentType {
  img
  vid
  text
}

enum PostStatus {
  suspended
  active
  paused
  pending
}

enum ProfileStatus {
  suspended
  active
  paused
  pending
}
