# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @key(fields: String!) on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

type PostTag {
  userId: ID!
}

type MarketingTag {
  id: ID!
  type: MarketingTagType!
  x: Float!
  y: Float!
  product: Product!
  service: Service!
}

enum MarketingTagType {
  product
  service
}

type PostMention {
  userId: ID!
}

type PostLocation {
  city: String!
  country: String!
  address: String
  state: String
}

type NewsfeedPost {
  id: ID!
  userId: ID!
  title: String!
  content: String!
  attachments: [Attachment!]!
  hashtags: [Hashtag!]!
  reactionNum: Int!
  comments: Int!
  shares: Int!
  views: Int!
  mentions: [PostMention!]!
  location: PostLocation
  tags: [PostTag!]!
  createdAt: String!
  updatedAt: String!
  publisher: Profile
  authorProfileId: ID!
}

type Attachment {
  type: AttachmentType!
  src: String!
  marketingTags: [MarketingTag!]!
}

enum AttachmentType {
  img
  vid
  text
}

type Hashtag {
  tag: String!
}

type BlockedUser {
  id: ID!
  blockerProfileId: ID!
  blockedProfileId: ID!
  blockedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Profile {
  user: Account
  id: ID!
  ownerId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  activeStatus: ActiveStatus!
  lastActive: DateTime!
  bio: String!
  photo: String!
  coverPhoto: String!
  followers: Int!
  followingData: [Follow!]
  following: Int!
  followersData: [Follow!]
  publications: Int!
  profession: String!
  visibility: ProfileVisibility!
  verified: Boolean!
  visits: Int!
}

enum ActiveStatus {
  idle
  active
  inActive
  doNotDisturb
}

enum ProfileVisibility {
  public
  followers
  private
}

type ProfilePaginatedResponse {
  data: [Profile!]!
  total: Int!
  hasMore: Boolean!
}

type ProfileMeta {
  id: ID!
  username: String!
  photo: String!
}

type ProfileMetaPaginatedResponse {
  data: [ProfileMeta!]!
  total: Int!
  hasMore: Boolean!
}

type Follow {
  id: ID!
  followerProfile: Profile
  followerProfileId: ID!
  followingProfile: Profile
  followingProfileId: ID!
  followedAt: DateTime!
}

type Comment {
  id: ID!
  hostType: ContentHostType!
  hostId: ID!
  author: Profile
  authorProfileId: String!
  userId: String!
  attachment: Attachment!
  content: String!
  commentedAt: DateTime!
  likes: Int!
  replies: Int!
  createdAt: String!
  updatedAt: String!
}

enum ContentHostType {
  post_newsfeed
  post_service
  post_shop
  comment
  action
  story
}

type PaginationCommentsResponse {
  data: [Comment!]!
  total: Int!
  hasMore: Boolean!
}

type ContentReaction {
  id: ID!
  hostId: ID!
  userId: ID!
  reactionType: ContentReactionType!
  reactedBy: Profile
  reactedByProfileId: ID!
  reactedAt: DateTime!
}

enum ContentReactionType {
  like
  love
  funny
  sad
  angry
}

type ContentShare {
  id: ID!
  hostId: ID!
  hostType: ContentHostType!
  sharedBy: Profile
  sharedByProfileId: ID!
  sharedByUserId: ID!
  sharedAt: DateTime!
}

type ContentSharePaginationResponse {
  data: [ContentShare!]!
  total: Int!
  hasMore: Boolean!
}

type NewsfeedHashtagSearch {
  mostLikedPost: NewsfeedPost!
  mostCommentedPost: NewsfeedPost!
  mostLikedVideo: NewsfeedPost!
  mostViewedVideo: NewsfeedPost!
}

type UserSavedPostsGroup {
  id: ID!
  userId: ID!
  posts: [NewsfeedPost!]!
}

type Account {
  id: ID!
  profile: Profile
}

type Product {
  id: ID!
}

type TopHashtagNewsfeedPosts {
  viewed: NewsfeedPost!
  liked: NewsfeedPost!
  commented: NewsfeedPost!
  shared: NewsfeedPost!
}

type ProductPost {
  id: ID!
  userId: ID!
  user: Account
  productId: ID!
  reactionNum: Int!
  comments: Int!
  shares: Int!
  views: Int!
  visibility: PostVisibility!
  location: PostLocation
  commentsVisibility: CommentsVisibility!
  product: Product!
  createdAt: String!
  updatedAt: String!
}

enum PostVisibility {
  hidden
  public
  followers
  following
}

enum CommentsVisibility {
  hidden
  public
}

type Affiliation {
  id: ID!
}

type AffiliationPost {
  id: ID!
  userId: ID!
  user: Account
  affiliationId: ID!
  reactionNum: Int!
  comments: Int!
  shares: Int!
  views: Int!
  visibility: PostVisibility!
  location: PostLocation
  commentsVisibility: CommentsVisibility!
  affiliation: Affiliation!
  createdAt: String!
  updatedAt: String!
}

type Service {
  id: ID!
}

type ServicePost {
  id: ID!
  serviceId: ID!
  service: Service
  serviceType: TypeOfService!
  userId: ID!
  user: Account
  reactionNum: Int!
  comments: Int!
  shares: Int!
  views: Int!
  visibility: PostVisibility!
  location: PostLocation!
  commentsVisibility: CommentsVisibility!
  createdAt: String!
  updatedAt: String!
}

enum TypeOfService {
  hotelRoom
  holidayRental
  restaurantMenu
  healthCenterTreatment
  beautyCenterTreatment
  vehicle
}

type Story {
  id: ID!
  publisherId: ID!
  publisher: Profile
  createdAt: DateTime!
  updatedAt: DateTime!
  type: StoryType!
  viewsCount: Int!
  reactionsNum: Int!
  referenceId: ID
  content: String
  attachements: Attachment
  views: [StoryView!]!
  newsfeedPost: NewsfeedPost
  shopPost: ProductPost
  affiliationPost: AffiliationPost
  servicePost: ServicePost
}

enum StoryType {
  base
  text
  image
  video
  affiliation
  product
  post
  service
}

type StoryView {
  id: ID!
  viewerId: ID!
  viewer: Account
  storyId: ID!
  createdAt: DateTime!
  story: Story
}

type RecentStory {
  userId: ID!
  newStory: Boolean!
  user: Account
}

type Block {
  id: ID!
  blockedUserId: ID!
  blockedAt: DateTime!
  blockedProfile: Profile
}

type PrivacySettings {
  id: ID!
  userId: ID!
  privateAccount: Boolean!
  hideLikesNum: Boolean!
  hideCommentsNum: Boolean!
  hideViewsNum: Boolean!
}

type HashtagProductPost {
  viewed: ProductPost
  liked: ProductPost
  commented: ProductPost
  shared: ProductPost
}

type HashtagTopAffiliationPost {
  viewed: AffiliationPost
  liked: AffiliationPost
  shared: AffiliationPost
  commented: AffiliationPost
}

type Action {
  id: ID!
  attachment: Attachment!
  userId: ID!
  reactionNum: Int!
  comments: Int!
  shares: Int!
  visibility: PostVisibility!
  location: PostLocation!
  commentsVisibility: CommentsVisibility!
}

type ServicePostHashtagSearch {
  viewed: ServicePost
  liked: ServicePost
  shared: ServicePost
  commented: ServicePost
}

type Community {
  id: ID!
  type: String!
  newsfeed: NewsfeedPost
  action: Action
  newsfeedPost: NewsfeedPost
}

type FriendSuggestion {
  accounts: [Account!]!
}

type Place {
  id: ID!
  type: String!
}

type PlaceSuggestions {
  places: [Place!]!
}

type Query {
  findAll: ProfilePaginatedResponse!
  myProfile: Profile!
  getProfile(id: String!): Profile!
  searchPopularUsers(args: SearchPopularProfilesInput!): ProfilePaginatedResponse!
  getFollowersByProfileId(getFollowersMetaInput: GetProfileFollowersMetaInput!): ProfileMetaPaginatedResponse!
  getFollowingByProfileId(getFollowingMetaInput: GetProfileFollowersMetaInput!): ProfileMetaPaginatedResponse!
  getMyFollowers(getMyFollowersInput: GetMyProfileFollowersMetaInput!): ProfileMetaPaginatedResponse!
  getMyFollowing(getMyFollowersInput: GetMyProfileFollowersMetaInput!): ProfileMetaPaginatedResponse!
  isFollowed(profileId: String!): Boolean!
  getNewsfeedPostsByUserId(args: GetNewsfeedPostsByUserIdInput!): [NewsfeedPost!]!
  getNewsfeedPostById(id: String!): NewsfeedPost!
  getTopHashtagNewsfeed: TopHashtagNewsfeedPosts!
  getAdminProfile(id: String!): Profile!
  getProfileNewsfeedPosts(getUserNewsfeedPosts: GetNewsfeedPostsByUserIdInput!): [NewsfeedPost!]!
  getNewsfeedPosts: [NewsfeedPost!]!
  comments: [Comment!]!
  updateComment(updateCommentInput: UpdateCommentInput!): PaginationCommentsResponse!
  getContentComments(getContentCommentsArgs: GetContentCommentsInput!): [Comment!]!
  getAllShares: ContentSharePaginationResponse!
  getNewsfeedHashtagPosts(hashtagSearchInput: GetHashtagNewsfeedPostsInput!): NewsfeedHashtagSearch!
  getMySavedPosts(args: GetMySavedPostsInput!): UserSavedPostsGroup!
  getStory(storyId: String!): Story!
  getUserStory(userId: String!): Story!
  getUserPrevStory(storyId: String!): Story!
  getMyStories: [Story!]!
  getStoryViews(getStoryViewsInput: GetStorySeenByInput!): [StoryView!]!
  getRecentStories(getRecentStoryInput: GetRecentStoriesInput = {pagination: {page: 1, take: 10}}): [RecentStory!]!
  getMyBlockList(args: GetMyBlocklistInput!): [Block!]!
  getMyPrivacySettings: PrivacySettings!
  getUserProductPosts(args: GetUserProductPostsInput!): [ProductPost!]!
  getRecommendedProductPosts(args: GetShopRecommendedPostsInput!): [ProductPost!]!
  getTopHashtagPosts(tag: String!): HashtagProductPost!
  getAuthorAffiliationPosts(args: GetUserAffiliationPostsInput!): [AffiliationPost!]!
  getAffiliationPost(args: GetAffiliationPostInput!): AffiliationPost!
  getRecommendedAffiliationPosts(args: GetRecommendedAffiliationPostsInput!): [AffiliationPost!]!
  getHashtagTopAffiliationPost(tag: String!): HashtagTopAffiliationPost
  getUserActions(args: GetUserActionsInput!): [Action!]!
  getAction(id: String!): [Action!]!
  getServicePost(id: String!): ServicePost!
  getUserServicePosts(args: GetUserServicesPostsInput!): [ServicePost!]!
  getRecommendedServicePosts(args: GetRecommendedServicePostsInput!): [ServicePost!]!
  getHashtagTopServicePosts(args: GetHashtagTopServicePostsInput!): ServicePostHashtagSearch!
  getCommunityPosts(args: GetCommunityPostsInput!): [Community!]!
  getMyFriendSuggestions(args: GetMyFriendSuggestionsInput!): FriendSuggestion!
  getPlaceSuggestions(args: GetPlaceSuggestionInput!): PlaceSuggestions!
}

input SearchPopularProfilesInput {
  q: String!
  cursor: String
  take: Int = 15
}

input GetProfileFollowersMetaInput {
  pagination: GqlPaginationInput!
  profileId: String!
}

input GqlPaginationInput {
  page: Int!
  take: Int!
}

input GetMyProfileFollowersMetaInput {
  pagination: GqlPaginationInput!
}

input GetNewsfeedPostsByUserIdInput {
  userId: ID!
  pagination: GqlPaginationInput!
}

input UpdateCommentInput {
  content: String
  mentions: [CommentMentionInput!]
  id: ID!
}

input CommentMentionInput {
  userId: ID!
  profileId: ID!
}

input GetContentCommentsInput {
  id: ID!
  cursor: String
  take: Int = 10
}

input GetHashtagNewsfeedPostsInput {
  tag: String!
  profileId: ID!
  userId: ID!
}

input GetMySavedPostsInput {
  pagination: GqlPaginationInput!
}

input GetStorySeenByInput {
  pagination: GqlPaginationInput!
  storyId: ID!
  q: String
}

input GetRecentStoriesInput {
  pagination: GqlPaginationInput!
}

input GetMyBlocklistInput {
  pagination: GqlPaginationInput!
}

input GetUserProductPostsInput {
  pagination: GqlPaginationInput!
  authorId: ID!
}

input GetShopRecommendedPostsInput {
  q: String
}

input GetUserAffiliationPostsInput {
  userId: ID!
  pagination: GqlPaginationInput!
}

input GetAffiliationPostInput {
  id: String!
}

input GetRecommendedAffiliationPostsInput {
  pagination: GqlPaginationInput!
}

input GetUserActionsInput {
  userId: ID!
  pagination: GqlPaginationInput!
}

input GetUserServicesPostsInput {
  userId: ID!
  pagination: GqlCursorPaginationInput!
}

input GqlCursorPaginationInput {
  take: Int!
  cursor: String
}

input GetRecommendedServicePostsInput {
  pagination: GqlPaginationInput!
  serviceType: String!
}

input GetHashtagTopServicePostsInput {
  tag: String!
}

input GetCommunityPostsInput {
  q: String!
}

input GetMyFriendSuggestionsInput {
  pagination: GqlPaginationInput!
  q: String
}

input GetPlaceSuggestionInput {
  pagination: GqlPaginationInput!
}

type Mutation {
  createProfile(createProfileInput: CreateProfileInput!): Profile!
  updateMyProfile(updateProfileInput: UpdateProfileInput!): Profile!
  deleteMyProfile: Profile!
  sendFollowRequest(profileId: String!): Boolean!
  followProfile(followUserInput: FollowProfileInput!): Boolean!
  unFollow(unFollowProfileInput: UnFollowProfileInput!): Boolean!
  createNewsfeedPost(createNewsfeedPostInput: CreateNewsfeedPostInput!): NewsfeedPost!
  updateNewsfeedPost(updateNewsfeedPostInput: UpdateNewsfeedPostInput!): NewsfeedPost!
  removeNewsfeedPost(id: Int!): NewsfeedPost!
  updateProfile(updateProfileInput: UpdateProfileAdminInput!): Profile!
  editNewsfeedPostAdmin(args: UpdatePostAdminInput!): Boolean!
  createReaction(CreateReactionInput: CreateReactionInput!): Boolean!
  removeReaction(removeReactionArgs: RemoveReactionInput!): ContentReaction!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  removeComment(id: Int!): Comment!
  shareContent(createContentShareInput: CreateContentShareInput!): ContentShare!
  deleteStory(deleteStoryInput: DeleteStoryInput!): Story!
  createStory(createStoryInput: CreateStoryInput!): Boolean!
  likeStory(likeStoryInput: LikeStoryInput!): Boolean!
  blockUser(args: CreateBlockInput!): Boolean!
  unblockUser(args: CreateBlockInput!): Boolean!
  updateMyPrivacySettings(args: UpdateMyPrivacyInput!): PrivacySettings!
  createAction(args: CreateActionInput!): Boolean!
  hideContent(args: HideContentInput!): Boolean!
}

input CreateProfileInput {
  photo: String!
  bio: String
  profession: String!
  visibility: ProfileVisibility
  username: String!
}

input UpdateProfileInput {
  photo: String
  bio: String
  profession: String
  visibility: ProfileVisibility
  username: String
}

input FollowProfileInput {
  profileId: String!
}

input UnFollowProfileInput {
  profileId: String!
}

input CreateNewsfeedPostInput {
  title: String!
  content: String!
  attachments: [AttachmentInput!]!
  hashtags: [HashtagInput!]!
  tags: [PostTagInput!]!
  visibility: PostVisibility
  location: PostLocationInput
}

input AttachmentInput {
  type: AttachmentType!
  src: String!
  marketingTags: [AttachmentMarketingTagInput!]!
}

input AttachmentMarketingTagInput {
  id: String!
  type: MarketingTagType!
  x: Float!
  y: Float!
}

input HashtagInput {
  tag: String!
}

input PostTagInput {
  userId: String!
}

input PostLocationInput {
  city: String!
  country: String!
  address: String
  state: String
}

input UpdateNewsfeedPostInput {
  title: String
  content: String
  attachments: [AttachmentInput!]
  hashtags: [HashtagInput!]
  tags: [PostTagInput!]
  visibility: PostVisibility
  location: PostLocationInput
  id: ID!
}

input UpdateProfileAdminInput {
  photo: String
  bio: String
  profession: String
  visibility: ProfileVisibility
  username: String
  profileId: ID
}

input UpdatePostAdminInput {
  title: String
  content: String
  attachments: [AttachmentInput!]
  hashtags: [HashtagInput!]
  tags: [PostTagInput!]
  visibility: PostVisibility
  location: PostLocationInput
  id: ID!
  userId: ID!
}

input CreateReactionInput {
  contentId: ID!
  contentType: ContentHostType!
  authorProfileId: ID!
}

input RemoveReactionInput {
  contentId: ID!
  contentType: ContentHostType!
}

input CreateCommentInput {
  contentType: ContentHostType!
  contentId: ID!
  authorProfileId: ID!
  authorUserId: ID!
  content: String!
  mentions: [CommentMentionInput!]!
  attachment: AttachmentInput
}

input CreateContentShareInput {
  contentId: ID!
  contentType: ContentHostType!
}

input DeleteStoryInput {
  storyId: ID!
}

input CreateStoryInput {
  productId: ID
  newsfeedPostId: ID
  shopPostId: ID
  affiliationPostId: ID
  servicePostId: ID
  content: String
  attachment: AttachmentInput
  tags: [PostTagInput!] = []
}

input LikeStoryInput {
  storyId: ID!
}

input CreateBlockInput {
  userId: ID!
}

input UpdateMyPrivacyInput {
  privateAccount: Boolean
  hideLikesNum: Boolean
  hideCommentsNum: Boolean
  hideViewsNum: Boolean
}

input CreateActionInput {
  attachment: AttachmentInput!
  location: PostLocationInput
  commentsVisibility: CommentsVisibility
}

input HideContentInput {
  id: ID!
}
