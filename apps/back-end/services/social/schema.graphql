# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @key(fields: String!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @shareable on FIELD_DEFINITION | OBJECT

directive @link(url: String!, import: [link__Import]) on SCHEMA

directive @tag(name: String!) repeatable on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @override(from: String!) on FIELD_DEFINITION

type PostTag {
  userId: ID!
}

type MarketingTag {
  id: ID!
  type: MarketingTagType!
  x: Float!
  y: Float!
  product: Product!
  service: Service!
}

enum MarketingTagType {
  product
  service
}

type PostMention {
  userId: ID!
}

type PostLocation {
  city: String!
  country: String!
  address: String
  state: String
}

type NewsfeedPost {
  id: ID!
  userId: ID!
  title: String!
  content: String!
  attachments: [String!]!
  hashtags: [Hashtag!]
  reactionNum: Int!
  comments: Int!
  shares: Int!
  views: Int!
  mentions: [PostMention!]
  location: PostLocation
  tags: [PostTag!]
  createdAt: String!
  updatedAt: String!
  enableComments: Boolean!
  commentsVisibility: CommentsVisibility!
  productIds: [String!]
  serviceId: String
  affiliationId: String
  type: PostType!
  publisher: Profile
  affiliation: Affiliation
  products: [Product!]
  service: Service
  pinned: Boolean!
  isLiked: Boolean!
  isCommented: Boolean!
  isSaved: Boolean!
  thumbnail: String!
}

enum CommentsVisibility {
  hidden
  public
}

enum PostType {
  newsfeed_post
  shop_post
  service_post
  affiliation_post
}

type NewsfeedPostsPaginationResponse {
  data: [NewsfeedPost!]!
  cursor: String
  nextCursor: String
  hasMore: Boolean!
  total: Int!
}

type AdminNewsfeedPost {
  id: ID!
  userId: ID!
  title: String!
  content: String!
  attachments: [String!]!
  hashtags: [Hashtag!]
  reactionNum: Int!
  comments: Int!
  shares: Int!
  views: Int!
  mentions: [PostMention!]
  location: PostLocation
  tags: [PostTag!]
  createdAt: String!
  updatedAt: String!
  enableComments: Boolean!
  commentsVisibility: CommentsVisibility!
  productIds: [String!]
  serviceId: String
  affiliationId: String
  type: PostType!
  publisher: Profile
  affiliation: Affiliation
  products: [Product!]
  service: Service
  pinned: Boolean!
  isLiked: Boolean!
  isCommented: Boolean!
  isSaved: Boolean!
  thumbnail: String!
  visibility: PostVisibility!
}

enum PostVisibility {
  hidden
  public
  followers
  following
}

type Attachment {
  type: AttachmentType!
  src: String!
  marketingTags: [MarketingTag!]!
}

enum AttachmentType {
  img
  vid
  text
}

type Hashtag {
  tag: String!
}

type BlockedUser {
  id: ID!
  blockerProfileId: ID!
  blockedProfileId: ID!
  blockedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Profile {
  user: Account
  id: ID!
  ownerId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  activeStatus: ActiveStatus!
  lastActive: DateTime!
  bio: String!
  photo: String!
  coverPhoto: String!
  followers: Int!
  followingData: [Follow!]
  following: Int!
  followersData: [Follow!]
  publications: Int!
  profession: String!
  visibility: ProfileVisibility!
  verified: Boolean!
  visits: Int!
  newStory: Boolean!
}

enum ActiveStatus {
  idle
  active
  inActive
  doNotDisturb
}

enum ProfileVisibility {
  public
  private
}

type ProfileFollow {
  user: Account
  id: ID!
  ownerId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  activeStatus: ActiveStatus!
  lastActive: DateTime!
  bio: String!
  photo: String!
  coverPhoto: String!
  followers: Int!
  followingData: [Follow!]
  following: Int!
  followersData: [Follow!]
  publications: Int!
  profession: String!
  visibility: ProfileVisibility!
  verified: Boolean!
  visits: Int!
  newStory: Boolean!
  isFollowed: Boolean!
}

type ProfilePaginatedResponse {
  data: [Profile!]!
  total: Int!
  hasMore: Boolean!
}

type ProfileMeta {
  id: ID!
  username: String!
  photo: String!
}

type ProfileMetaPaginatedResponse {
  data: [Profile!]!
  total: Int!
  hasMore: Boolean!
}

type ProfileMetaCursorPaginatedResponse {
  data: [Profile!]!
  cursor: String
  nextCursor: String
  hasMore: Boolean!
  total: Int!
}

type Follow {
  id: ID!
  followerUserId: ID!
  followingUserId: ID!
  followedAt: DateTime!
}

type Comment {
  id: ID!
  hostType: ContentHostType!
  hostId: ID!
  author: Profile
  authorProfileId: String!
  userId: String!
  attachment: Attachment!
  content: String!
  commentedAt: DateTime!
  likes: Int!
  replies: Int!
  createdAt: String!
  updatedAt: String!
}

enum ContentHostType {
  post_newsfeed
  post_service
  post_shop
  post_affiliation
  comment
  action
  story
  chat_message
}

type PaginationCommentsResponse {
  data: [Comment!]!
  total: Int!
  hasMore: Boolean!
}

type CommentsCursorPaginationResponse {
  data: [Comment!]!
  cursor: String
  nextCursor: String
  hasMore: Boolean!
  total: Int!
}

type ContentReaction {
  id: ID!
  hostId: ID!
  userId: ID!
  reactionType: ContentReactionType!
  reactedBy: Profile
  reactedByUserId: ID!
  reactedAt: DateTime!
}

enum ContentReactionType {
  like
  love
  funny
  sad
  angry
}

type ContentShare {
  id: ID!
  hostId: ID!
  hostType: ContentHostType!
  sharedBy: Profile
  sharedByProfileId: ID!
  sharedByUserId: ID!
  sharedAt: DateTime!
}

type ContentSharePaginationResponse {
  data: [ContentShare!]!
  total: Int!
  hasMore: Boolean!
}

type NewsfeedHashtagSearch {
  mostLikedPost: NewsfeedPost!
  mostCommentedPost: NewsfeedPost!
  mostLikedVideo: NewsfeedPost!
  mostViewedVideo: NewsfeedPost!
}

type UserSavedPost {
  postId: ID!
  postType: PostType!
  post: NewsfeedPost!
}

type UserSavedPostsGroup {
  id: ID!
  userId: ID!
  posts: [NewsfeedPost!]!
}

type Account {
  id: ID!
  profile: Profile
}

type Product {
  id: ID!
}

type Shop {
  ownerId: String!
  profile: Profile
  sellerProfile: Profile!
}

type TopHashtagNewsfeedPosts {
  viewed: NewsfeedPost!
  liked: NewsfeedPost!
  commented: NewsfeedPost!
  shared: NewsfeedPost!
}

type Affiliation {
  id: ID!
}

type AffiliationPost {
  id: ID!
  userId: ID!
  user: Account
  affiliationId: ID!
  reactionNum: Int!
  comments: Int!
  shares: Int!
  views: Int!
  visibility: PostVisibility!
  location: PostLocation
  commentsVisibility: CommentsVisibility!
  affiliation: Affiliation!
  createdAt: String!
  updatedAt: String!
}

type Service {
  id: ID!
}

type ServicePost {
  id: ID!
  serviceId: ID!
  service: Service
  serviceType: TypeOfService!
  userId: ID!
  user: Account
  reactionNum: Int!
  comments: Int!
  shares: Int!
  views: Int!
  visibility: PostVisibility!
  location: PostLocation!
  commentsVisibility: CommentsVisibility!
  createdAt: String!
  updatedAt: String!
}

enum TypeOfService {
  hotelRoom
  holidayRental
  restaurantMenu
  healthCenterTreatment
  beautyCenterTreatment
  vehicle
}

type SavesCollection {
  id: ID!
  userId: String!
  name: String!
  createdAt: String!
  updatedAt: String!
  recentSaves: [UserSavedPost!]!
}

type ProductPost {
  id: ID!
  userId: ID!
  user: Account
  productId: ID!
  reactionNum: Int!
  comments: Int!
  shares: Int!
  views: Int!
  visibility: PostVisibility!
  location: PostLocation
  commentsVisibility: CommentsVisibility!
  product: Product!
  createdAt: String!
  updatedAt: String!
}

type Story {
  id: ID!
  publisherId: ID!
  publisher: Profile
  createdAt: DateTime!
  updatedAt: DateTime!
  type: StoryType!
  viewsCount: Int!
  reactionsNum: Int!
  referenceId: ID
  content: String
  attachements: Attachment
  views: [StoryView!]!
  newsfeedPost: NewsfeedPost
  shopPost: ProductPost
  affiliationPost: AffiliationPost
  servicePost: ServicePost
}

enum StoryType {
  base
  text
  image
  video
  affiliation
  product
  post
  service
}

type StoryCursorPaginationResponse {
  data: Story!
  cursor: String!
  nextCursor: String!
  hasMore: Boolean!
}

type StoryView {
  id: ID!
  viewerId: ID!
  viewer: Account
  storyId: ID!
  createdAt: DateTime!
  story: Story
  gender: ProfileReachedGender!
}

enum ProfileReachedGender {
  male
  female
}

type RecentStory {
  userId: ID!
  newStory: Boolean!
  user: Account
}

type Block {
  id: ID!
  blockedUserId: ID!
  blockedAt: DateTime!
  blockedProfile: Profile
}

type PrivacySettings {
  id: ID!
  userId: ID!
  privateAccount: Boolean!
  hideLikesNum: Boolean!
  hideCommentsNum: Boolean!
  hideViewsNum: Boolean!
  initialMessaging: MessagingSettings!
  messageReadStatus: Boolean!
}

enum MessagingSettings {
  all
  follow
  off
}

type HashtagProductPost {
  viewed: ProductPost
  liked: ProductPost
  commented: ProductPost
  shared: ProductPost
}

type HashtagTopAffiliationPost {
  viewed: AffiliationPost
  liked: AffiliationPost
  shared: AffiliationPost
  commented: AffiliationPost
}

type Action {
  id: ID!
  src: String!
  cover: String!
  thumbnail: String!
  link: String!
  userId: ID!
  reactionNum: Int!
  comments: Int!
  views: Int!
  shares: Int!
  visibility: PostVisibility!
  location: PostLocation!
  commentsVisibility: CommentsVisibility!
  musicId: String
  audioId: String
  effectId: String
  tags: [PostTag!]!
  effect: Effect
  audio: Audio
  profile: Profile!
  followedBy: [Profile!]!
}

type GetActionsCursorResponse {
  data: [Action!]!
  cursor: String
  nextCursor: String
  hasMore: Boolean!
  total: Int!
}

type ActionTopHashtagResponse {
  viewed: Action
  liked: Action
  shared: Action
  commented: Action
}

type Effect {
  id: ID!
  name: String!
  usage: Int!
  thumbnail: String!
  status: EffectStatus!
}

enum EffectStatus {
  active
  inActive
}

type EffectCursorPaginationResponse {
  data: [Effect!]!
  cursor: String
  nextCursor: String
  hasMore: Boolean!
  total: Int!
}

type Audio {
  id: ID!
  authorUserId: ID!
  uploadId: ID!
  name: String!
  usage: Int!
  createdAt: String!
  updatedAt: String!
  src: String
}

type AudioCursorPaginationResponse {
  data: [Audio!]!
  cursor: String
  nextCursor: String
  hasMore: Boolean!
  total: Int!
}

type ServicePostHashtagSearch {
  viewed: ServicePost
  liked: ServicePost
  shared: ServicePost
  commented: ServicePost
}

type Community {
  id: ID!
  type: String!
  newsfeed: NewsfeedPost
  action: Action
  newsfeedPost: NewsfeedPost
}

type FriendSuggestion {
  accounts: [Account!]!
}

type Place {
  id: ID!
  type: String!
}

type PlaceSuggestions {
  places: [Place!]!
}

type ProfileStatistics {
  total_visits: Int!
  prev_total_visits: Int!
  total_followers: Int!
  prev_total_followers: Int!
  total_comments: Int!
  prev_total_comments: Int!
  total_saves: Int!
  prev_total_saves: Int!
  total_likes: Int!
  prev_total_likes: Int!
}

type ProfileOverviewStatistics {
  reached: Int!
  engaged: Int!
  activity: Int!
}

type ProfileReachedAudience {
  id: ID!
  profileId: ID!
  reachedByProfileId: ID!
  gender: ProfileReachedGender!
  age: Int!
  createdAt: String!
}

type ProfileVisitDetails {
  country: String!
  visits: Int!
  visitPercent: Float!
}

type ProfileVisitsDetails {
  countries: [ProfileVisitDetails!]!
}

type SocialTag {
  contentId: String!
  taggedUserIds: [String!]!
  taggedProfiles: [ProfileFollow!]!
}

type CameraFilter {
  id: ID!
  name: String!
  filterStylesJSON: String!
  usage: Int!
  thumbnail: String!
  status: CameraFilterStatus!
  createdAt: String!
  updatedAt: String!
}

enum CameraFilterStatus {
  active
  inActive
}

type CameraFiltersCursorResponse {
  data: [CameraFilter!]!
  cursor: String
  nextCursor: String
  hasMore: Boolean!
  total: Int!
}

type ContentView {
  id: String!
  viewerId: String!
  contentOnwerId: String!
  contentType: ContentHostType!
  createdAt: String!
  updatedAt: String!
}

type Query {
  findAll: ProfilePaginatedResponse!
  getProfileDetails(userId: String!): Profile!
  myProfile: Profile!
  getProfile(id: String!): Profile!
  searchPopularUsers(args: SearchPopularProfilesInput!): ProfilePaginatedResponse!
  getFollowersByProfileId(getFollowersMetaInput: GetProfileFollowersMetaInput!): ProfileMetaPaginatedResponse!
  getCursorPaginationFollowersByProfileId(getFollowersMetaInput: GetProfileFollowersMetaCursorInput!): ProfileMetaCursorPaginatedResponse!
  getCursorPaginationFollowingsByProfileId(getFollowersMetaInput: GetProfileFollowersMetaCursorInput!): ProfileMetaCursorPaginatedResponse!
  getFollowingByProfileId(getFollowingMetaInput: GetProfileFollowersMetaInput!): ProfileMetaPaginatedResponse!
  getMyFollowers(getMyFollowersInput: GetMyProfileFollowersMetaInput!): ProfileMetaPaginatedResponse!
  getMyFollowing(getMyFollowersInput: GetMyProfileFollowersMetaInput!): ProfileMetaPaginatedResponse!
  isFollowed(profileId: String!): Boolean!
  getTrendingHashtagPosts(args: GetPostsByHashtagInput!): NewsfeedPostsPaginationResponse!
  getMyNewsfeedPosts(args: GetMyNewsfeedPostsInput!): [NewsfeedPost!]!
  getPostsByUserId(args: GetNewsfeedPostsByUserIdInput!): [NewsfeedPost!]!
  getNewsfeedPostById(id: String!): NewsfeedPost!
  getSocialPostById(id: String!): NewsfeedPost!
  getTopHashtagNewsfeed(tag: String!): TopHashtagNewsfeedPosts!
  getAdminProfile(id: String!): Profile!
  getProfileNewsfeedPosts(getUserNewsfeedPosts: GetNewsfeedPostsByUserIdInput!): [NewsfeedPost!]!
  getFilteredNewsfeedPosts(args: GetAdminFilteredNewsfeedPostsInput!): [NewsfeedPost!]!
  adminGetNewsfeedPost(id: String!): AdminNewsfeedPost!
  updateComment(updateCommentInput: UpdateCommentInput!): PaginationCommentsResponse!
  getContentComments(getContentCommentsArgs: GetContentCommentsInput!): CommentsCursorPaginationResponse!
  getContentCommentsCount(id: String!, type: ContentHostType!): Int!
  adminGetContentComments(args: AdminGetContentCommentsInput!): [Comment!]!
  getAllShares: ContentSharePaginationResponse!
  getNewsfeedHashtagPosts(hashtagSearchInput: GetHashtagNewsfeedPostsInput!): NewsfeedHashtagSearch!
  getMySavedPosts(args: GetMySavedPostsInput!): UserSavedPostsGroup!
  getUserSaveCollections(userId: String!): [SavesCollection!]!
  adminGetAccountSavedPosts(args: GetMySavedPostsInput!, accountId: String!): UserSavedPostsGroup!
  getStory(storyId: String!): Story!
  getUserStory(args: GetUserStoryInput!): StoryCursorPaginationResponse!
  getAdminFilteredStories(args: GetAdminFilteredStoriesInput!): [Story!]!
  getUserPrevStory(storyId: String!): Story!
  getMyStories: [Story!]!
  getStoryViews(getStoryViewsInput: GetStorySeenByInput!): [StoryView!]!
  getRecentStories(getRecentStoryInput: GetRecentStoriesInput = {pagination: {page: 1, take: 10}}): [RecentStory!]!
  adminGetUserBlockList(args: GetMyBlocklistInput!, accountId: String!): [Block!]!
  getMyBlockList(args: GetMyBlocklistInput!): [Block!]!
  adminGetAccountPrivacySettings(id: String!): PrivacySettings!
  getMyPrivacySettings: PrivacySettings!
  getUserProductPosts(args: GetUserProductPostsInput!): [ProductPost!]!
  getRecommendedProductPosts(args: GetShopRecommendedPostsInput!): [ProductPost!]!
  getTopHashtagProductPosts(tag: String!): HashtagProductPost!
  getAuthorAffiliationPosts(args: GetUserAffiliationPostsInput!): [AffiliationPost!]!
  getAffiliationPost(args: GetAffiliationPostInput!): AffiliationPost!
  getRecommendedAffiliationPosts(args: GetRecommendedAffiliationPostsInput!): [AffiliationPost!]!
  getHashtagTopAffiliationPost(tag: String!): HashtagTopAffiliationPost
  getTopHashtagActions(tag: String!): ActionTopHashtagResponse!
  getUserActions(args: GetUserActionsInput!): GetActionsCursorResponse!
  getMyRecommendedAction: Action!
  getAction(id: String!): [Action!]!
  getActionByAudioId(args: GetActionByAudioIdInput!): GetActionsCursorResponse!
  getActionByEffectId(args: GetActionsByEffectIdInput!): GetActionsCursorResponse!
  getServicePost(id: String!): ServicePost!
  getUserServicePosts(args: GetUserServicesPostsInput!): [ServicePost!]!
  getRecommendedServicePosts(args: GetRecommendedServicePostsInput!): [ServicePost!]!
  getHashtagTopServicePosts(args: GetHashtagTopServicePostsInput!): ServicePostHashtagSearch!
  getCommunityPosts(args: GetCommunityPostsInput!): [Community!]!
  getMyFriendSuggestions(args: GetMyFriendSuggestionsInput!): FriendSuggestion!
  getPlaceSuggestions(args: GetPlaceSuggestionInput!): PlaceSuggestions!
  getProfileStatistics(args: GetProfileStatisticsInput!): ProfileStatistics!
  getProfileOverviewStatistics(args: GetProfileStatisticsInput!): ProfileOverviewStatistics!
  getProfileReachedAudinece(args: GetProfileStatisticsInput!): [ProfileReachedAudience!]!
  getProfilePopularStoriesViews(args: GetProfilePopularStoriesViewsInput!): StoryView!
  getProfileVisitsDetails(args: GetProfileVisitsDetailsInput!): ProfileVisitsDetails!
  getTopProfileStories(args: GetTopProfilePostsInput!): [Story!]!
  getTopProfilePosts(args: GetTopProfilePostsInput!): [NewsfeedPost!]!
  getContentTaggedProfile(args: GetContentTaggedProfilesInput!): SocialTag
  getAudioById(id: String!): AudioCursorPaginationResponse!
  getEffect(id: String!): Effect
  getTopEffects(args: GetTopEffectsInput!): EffectCursorPaginationResponse!
  getCameraFilterById(id: String!): CameraFilter!
  getCameraFilters(args: GetCameraFiltersInput!): CameraFiltersCursorResponse!
  getAudienceTrendingHour: [ContentView!]!
}

input SearchPopularProfilesInput {
  q: String!
  cursor: String
  take: Int! = 15
}

input GetProfileFollowersMetaInput {
  pagination: GqlPaginationInput!
  profileId: String!
}

input GqlPaginationInput {
  page: Int!
  take: Int!
}

input GetProfileFollowersMetaCursorInput {
  take: Int!
  cursor: String
  userId: String!
}

input GetMyProfileFollowersMetaInput {
  pagination: GqlPaginationInput!
}

input GetPostsByHashtagInput {
  take: Int!
  cursor: String
  hashtag: String!
  postType: PostType!
}

input GetMyNewsfeedPostsInput {
  pagination: GqlPaginationInput!
  type: PostType!
}

input GetNewsfeedPostsByUserIdInput {
  userId: ID!
  type: PostType!
  pagination: GqlPaginationInput!
}

input GetAdminFilteredNewsfeedPostsInput {
  id: String
  username: String
  legend: String
  views: Int
  likes: Int
  comments: Int
  shares: Int
  date: String
  pagination: GqlPaginationInput!
}

input UpdateCommentInput {
  content: String
  mentions: [CommentMentionInput!]
  id: ID!
}

input CommentMentionInput {
  userId: ID!
  profileId: ID!
}

input GetContentCommentsInput {
  id: ID!
  cursor: String
  take: Int = 10
}

input AdminGetContentCommentsInput {
  pagination: GqlPaginationInput!
  contentId: ID!
  contentType: ContentHostType!
}

input GetHashtagNewsfeedPostsInput {
  tag: String!
  profileId: ID!
  userId: ID!
}

input GetMySavedPostsInput {
  pagination: GqlPaginationInput!
}

input GetUserStoryInput {
  cursor: String
  userId: String!
  dir: Int!
  nextCursor: String
}

input GetAdminFilteredStoriesInput {
  id: String
  username: String
  legend: String
  views: Int
  likes: Int
  comments: Int
  shares: Int
  date: String
}

input GetStorySeenByInput {
  pagination: GqlPaginationInput!
  storyId: ID!
  q: String
}

input GetRecentStoriesInput {
  pagination: GqlPaginationInput!
}

input GetMyBlocklistInput {
  pagination: GqlPaginationInput!
}

input GetUserProductPostsInput {
  pagination: GqlPaginationInput!
  authorId: ID!
}

input GetShopRecommendedPostsInput {
  q: String
}

input GetUserAffiliationPostsInput {
  userId: ID!
  pagination: GqlPaginationInput!
}

input GetAffiliationPostInput {
  id: String!
}

input GetRecommendedAffiliationPostsInput {
  pagination: GqlPaginationInput!
}

input GetUserActionsInput {
  take: Int!
  cursor: String
  userId: ID!
}

input GetActionByAudioIdInput {
  take: Int!
  cursor: String
  id: ID!
}

input GetActionsByEffectIdInput {
  take: Int!
  cursor: String
  id: ID!
}

input GetUserServicesPostsInput {
  userId: ID!
  pagination: GqlCursorPaginationInput!
}

input GqlCursorPaginationInput {
  take: Int!
  cursor: String
}

input GetRecommendedServicePostsInput {
  pagination: GqlPaginationInput!
  serviceType: String!
}

input GetHashtagTopServicePostsInput {
  tag: String!
}

input GetCommunityPostsInput {
  q: String!
}

input GetMyFriendSuggestionsInput {
  pagination: GqlPaginationInput!
  q: String
}

input GetPlaceSuggestionInput {
  pagination: GqlPaginationInput!
}

input GetProfileStatisticsInput {
  profileId: ID!
  userId: ID!
  sinceHours: Int!
}

input GetProfilePopularStoriesViewsInput {
  profileId: ID!
  userId: ID!
  date: String!
}

input GetProfileVisitsDetailsInput {
  visitsOrderBy: Int!
  country: String!
  profileId: ID!
}

input GetTopProfilePostsInput {
  userId: ID!
  pagination: GqlPaginationInput!
  sinceHours: Int!
}

input GetContentTaggedProfilesInput {
  contentId: String!
  contentType: String!
}

input GetTopEffectsInput {
  take: Int!
  cursor: String
  effetSearchTerm: EffectSearchTerm!
  categoryId: ID
  search: String
}

enum EffectSearchTerm {
  recommended
  new
  cateogry
}

input GetCameraFiltersInput {
  take: Int!
  cursor: String
  categoryId: ID!
}

type Mutation {
  createProfile(createProfileInput: CreateProfileInput!): Profile!
  updateUserProfile(args: UpdateProfileInput!): Profile!
  deleteMyProfile: Profile!
  sendFollowRequest(profileId: String!): Boolean!
  followProfile(followUserInput: FollowProfileInput!): Boolean!
  unFollow(unFollowProfileInput: UnFollowProfileInput!): Boolean!
  createNewsfeedPost(createNewsfeedPostInput: CreateNewsfeedPostInput!): NewsfeedPost!
  updateNewsfeedPost(updateNewsfeedPostInput: UpdateNewsfeedPostInput!): NewsfeedPost!
  removeNewsfeedPost(id: Int!): NewsfeedPost!
  updateProfile(updateProfileInput: UpdateProfileAdminInput!): Profile!
  editNewsfeedPostAdmin(args: UpdatePostAdminInput!): Boolean!
  adminDeleteNewsfeedPost(id: String!): Boolean!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  removeComment(id: Int!): Comment!
  adminDeleteComment(commentId: String!): Boolean!
  createReaction(CreateReactionInput: CreateReactionInput!): Boolean!
  removeReaction(removeReactionArgs: RemoveReactionInput!): ContentReaction!
  shareContent(createContentShareInput: CreateContentShareInput!): ContentShare!
  createSavesCollection(name: String!): Boolean!
  deleteSavesCollection(id: String!): Boolean!
  savePost(postId: String!, collectionId: String!): Boolean!
  deleteStory(deleteStoryInput: DeleteStoryInput!): Story!
  createStory(createStoryInput: CreateStoryInput!): Boolean!
  likeStory(likeStoryInput: LikeStoryInput!): Boolean!
  adminRemvoeBlock(id: String!): Boolean!
  blockUser(args: CreateBlockInput!): Boolean!
  unblockUser(args: CreateBlockInput!): Boolean!
  updateAccountPrivacySettings(args: UpdateMyPrivacyInput!, id: String!): PrivacySettings!
  updateMyPrivacySettings(args: UpdateMyPrivacyInput!): PrivacySettings!
  createAction(args: CreateActionInput!): Boolean!
  UploadActionCover(file: Upload!): String!
  uploadActionVideo(src: Upload!): String!
  hideContent(args: HideContentInput!): Boolean!
  pinContent(args: CreatePinnedContentInput!): Boolean!
  unPinContent(args: CreatePinnedContentInput!): Boolean!
}

input CreateProfileInput {
  photo: String!
  bio: String
  profession: String!
  visibility: ProfileVisibility
  username: String!
  gender: ProfileReachedGender!
}

input UpdateProfileInput {
  photo: String
  bio: String
  profession: String
  visibility: ProfileVisibility
  username: String
  gender: ProfileReachedGender
  userId: String!
}

input FollowProfileInput {
  profileId: String!
}

input UnFollowProfileInput {
  profileId: String!
}

input CreateNewsfeedPostInput {
  title: String!
  content: String!
  attachments: [String!]!
  hashtags: [HashtagInput!]!
  tags: [PostTagInput!]!
  visibility: PostVisibility
  enableComments: Boolean
  commentsVisibility: CommentsVisibility
  location: PostLocationInput
  productIds: [String!]
  serviceId: String
  affiliationId: String
  type: PostType! = newsfeed_post
}

input HashtagInput {
  tag: String!
}

input PostTagInput {
  userId: String!
}

input PostLocationInput {
  city: String!
  country: String!
  address: String
  state: String
}

input UpdateNewsfeedPostInput {
  title: String
  content: String
  attachments: [String!]
  hashtags: [HashtagInput!]
  tags: [PostTagInput!]
  visibility: PostVisibility
  enableComments: Boolean
  commentsVisibility: CommentsVisibility
  location: PostLocationInput
  productIds: [String!]
  serviceId: String
  affiliationId: String
  type: PostType = newsfeed_post
  id: ID!
}

input UpdateProfileAdminInput {
  photo: String
  bio: String
  profession: String
  visibility: ProfileVisibility
  username: String
  gender: ProfileReachedGender
  userId: String
  accountId: ID
}

input UpdatePostAdminInput {
  title: String
  content: String
  attachments: [String!]
  hashtags: [HashtagInput!]
  tags: [PostTagInput!]
  visibility: PostVisibility
  enableComments: Boolean
  commentsVisibility: CommentsVisibility
  location: PostLocationInput
  productIds: [String!]
  serviceId: String
  affiliationId: String
  type: PostType = newsfeed_post
  id: ID!
  userId: ID!
}

input CreateCommentInput {
  contentType: ContentHostType!
  contentId: ID!
  authorProfileId: ID!
  authorUserId: ID!
  content: String!
  mentions: [CommentMentionInput!]!
  attachment: AttachmentInput
}

input AttachmentInput {
  type: AttachmentType!
  src: String!
  marketingTags: [AttachmentMarketingTagInput!]!
}

input AttachmentMarketingTagInput {
  id: String!
  type: MarketingTagType!
  x: Float!
  y: Float!
}

input CreateReactionInput {
  contentId: ID!
  contentType: ContentHostType!
}

input RemoveReactionInput {
  contentId: ID!
  contentType: ContentHostType!
}

input CreateContentShareInput {
  contentId: ID!
  contentType: ContentHostType!
}

input DeleteStoryInput {
  storyId: ID!
}

input CreateStoryInput {
  productId: ID
  newsfeedPostId: ID
  shopPostId: ID
  affiliationPostId: ID
  servicePostId: ID
  content: String
  attachment: AttachmentInput
  tags: [PostTagInput!]! = []
}

input LikeStoryInput {
  storyId: ID!
}

input CreateBlockInput {
  userId: ID!
}

input UpdateMyPrivacyInput {
  privateAccount: Boolean
  hideLikesNum: Boolean
  hideCommentsNum: Boolean
  hideViewsNum: Boolean
  initialMessaging: MessagingSettings
  messageReadStatus: Boolean
}

input CreateActionInput {
  srcUploadId: String!
  coverUploadId: String!
  thumbnailUploadId: String!
  mentions: [String!] = []
  tags: [String!] = []
  link: String
  location: PostLocationInput
  commentsVisibility: CommentsVisibility
  allowedActions: [ActionType!]!
}

enum ActionType {
  duet
  stitch
  comment
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input HideContentInput {
  id: ID!
}

input CreatePinnedContentInput {
  contentId: ID!
  userId: ID!
}

scalar link__Import